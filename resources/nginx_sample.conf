server {
    listen 80;
    server_name domain.com www.domain.com;
    rewrite ^(.*) https://$host$1 permanent;
}

server {
    listen 3443 ssl;
    server_name domain.com www.domain.com;
    # SSL parameters
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_certificate /etc/pki/domain.com/domain.crt;
    ssl_certificate_key /etc/pki/domain.com/domain.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    #ssl_prefer_server_ciphers on;
    #ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_ecdh_curve secp384r1;
    #ssl_ecdh_curve x25519; more secure less compatible
    #ssl_session_timeout  10m;
    #ssl_session_cache shared:SSL:10m;
    #ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 127.0.0.1;
    #resolver_timeout 5s;

    # Security headers
    ## X-Content-Type-Options: avoid MIME type sniffing
    add_header X-Content-Type-Options nosniff;

    ## Content-Security-Policy (CSP): Yes
    ## No 'script-src' directive, you need to test it yourself
    #add_header Content-Security-Policy "object-src 'none'; base-uri 'none'; require-trusted-types-for 'script'; frame-ancestors 'self';";
    ## The safest CSP, only block your website to be inside an inframe
    add_header Content-Security-Policy "frame-ancestors 'self';";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    #add_header X-Frame-Options DENY;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # log
    access_log /var/log/nginx/gitci.access.log;
    error_log /var/log/nginx/gitci.error.log;

    keepalive_requests 1000;
    location / {
        include uwsgi_params;
        uwsgi_pass unix:/tmp/.gitci.sock;
    }
}
